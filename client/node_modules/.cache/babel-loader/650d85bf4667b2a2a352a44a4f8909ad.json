{"ast":null,"code":"import FormData from 'form-data'; //class que permite enviar imagens para o backend\n\nimport BuscaBD from \"../../../fetchBackEnd/api\"; //classe axios\n\nasync function UploadImagens(event, formulario, formularioOpcionais) {\n  //fazupload imagens e retornar o nome e caminho de cada imagem no node\n  event.preventDefault();\n\n  if (formulario.marca === \"\" || formulario.modelo === \"\" || formulario.motor === \"\" || formulario.combustivel === \"\" || formulario.cambio === \"\" || formulario.carroceria === \"\" || formulario.sobre === \"\") {\n    alert(\"OS CAMPOS EM VERMELHO SÃO OBRIGATÓRIOS\");\n    event.preventDefault();\n    return;\n  }\n\n  if (formulario.imagensPath.length > 12) {\n    alert(\"SELECIONE ATÉ 12 IMAGENS\");\n    event.preventDefault();\n    return;\n  }\n\n  const classBuscaBD = new BuscaBD(); // classe da Api onde está conf  o Axios\n\n  const dadosImagens = new FormData(); //FormData classe que permite o multer identificar as imagens\n\n  for (var i = 0; i < formulario.imagensPath.length; i++) {\n    dadosImagens.append(\"files\", formulario.imagensPath[i]);\n  } //para enviar imagens tem q ser pelo FormData\n  //primeiro coloca eles numa array com o loop for. Necessário quando é mais de uma imagem\n\n\n  const retornaImagenslLocationNodeMulter = await classBuscaBD.BuscaBDPostImagem(dadosImagens); //faz o upload das imagens e o node vai retornar as imagens recebidas\n\n  console.log(retornaImagenslLocationNodeMulter);\n  let imagensPath = []; //faz um map na array nos nomes das imagens retornadas do Node\n\n  retornaImagenslLocationNodeMulter.data.map(dados => {\n    imagensPath.push(dados.filename); //armezeneo nome das imagens em array\n  });\n  const GuardaDados = await ArmazenaDadosBD(imagensPath, formulario, formularioOpcionais); //chama a func armazena dados enviado o nome das imagens recebidas em array\n\n  console.log(GuardaDados);\n  window.location.href = \"#inicio\";\n  return GuardaDados; // props.mensagemDeRetorno(GuardaDados.data)\n  //retorna mensagem de sucesso ou não\n} //com os nomes das imagens no node, reuni todos os dados do carro e junta com o nome das imagens\n\n\n_c = UploadImagens;\n\nasync function ArmazenaDadosBD(recebeLocationImagens, formulario, formularioOpcionais) {\n  const classBuscaBD = new BuscaBD();\n  var imagensLocation = JSON.stringify(recebeLocationImagens); //transforma a array de localização das imagens em uma array String, para poder ser gravado em um único campo no BD\n\n  var reuniDados = formulario;\n  reuniDados = { ...reuniDados,\n    imagensPath: imagensLocation\n  }; //add os nomes da imagem no obj reunidados, que é o formulario\n\n  var reunidadosFinal = Object.assign(reuniDados, formularioOpcionais); // Object.assign torna dois objs em um só\n\n  console.log(reuniDados);\n  const EnviaDadosBD = await classBuscaBD.BuscaBDPostDados(reunidadosFinal);\n  return EnviaDadosBD;\n}\n\n_c2 = ArmazenaDadosBD;\nexport default UploadImagens;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"UploadImagens\");\n$RefreshReg$(_c2, \"ArmazenaDadosBD\");","map":{"version":3,"sources":["/home/marco/Documents/project_react/template-carros/client/src/components/painelAdministrativo/publicacao/functions/funtionCriarAnuncio.js"],"names":["FormData","BuscaBD","UploadImagens","event","formulario","formularioOpcionais","preventDefault","marca","modelo","motor","combustivel","cambio","carroceria","sobre","alert","imagensPath","length","classBuscaBD","dadosImagens","i","append","retornaImagenslLocationNodeMulter","BuscaBDPostImagem","console","log","data","map","dados","push","filename","GuardaDados","ArmazenaDadosBD","window","location","href","recebeLocationImagens","imagensLocation","JSON","stringify","reuniDados","reunidadosFinal","Object","assign","EnviaDadosBD","BuscaBDPostDados"],"mappings":"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","sourcesContent":["import FormData from 'form-data' //class que permite enviar imagens para o backend\nimport BuscaBD from \"../../../fetchBackEnd/api\" //classe axios\n\nasync function UploadImagens(event, formulario, formularioOpcionais) {//fazupload imagens e retornar o nome e caminho de cada imagem no node\n    event.preventDefault()\n    if (formulario.marca === \"\" || formulario.modelo === \"\" || formulario.motor === \"\"\n        || formulario.combustivel === \"\" || formulario.cambio === \"\" || formulario.carroceria === \"\"\n        || formulario.sobre === \"\") {\n        alert(\"OS CAMPOS EM VERMELHO SÃO OBRIGATÓRIOS\")\n        event.preventDefault()\n        return\n    }\n    if (formulario.imagensPath.length > 12) {\n        alert(\"SELECIONE ATÉ 12 IMAGENS\")\n        event.preventDefault()\n        return\n    }\n    const classBuscaBD = new BuscaBD()// classe da Api onde está conf  o Axios\n    const dadosImagens = new FormData()//FormData classe que permite o multer identificar as imagens\n    for (var i = 0; i < formulario.imagensPath.length; i++) {\n        dadosImagens.append(\"files\", formulario.imagensPath[i])\n    }\n    //para enviar imagens tem q ser pelo FormData\n    //primeiro coloca eles numa array com o loop for. Necessário quando é mais de uma imagem\n\n    const retornaImagenslLocationNodeMulter = await classBuscaBD.BuscaBDPostImagem(dadosImagens)\n    //faz o upload das imagens e o node vai retornar as imagens recebidas\n    console.log(retornaImagenslLocationNodeMulter)\n    let imagensPath = []\n    //faz um map na array nos nomes das imagens retornadas do Node\n    retornaImagenslLocationNodeMulter.data.map((dados) => {\n        imagensPath.push(dados.filename)//armezeneo nome das imagens em array\n    })\n    const GuardaDados = await ArmazenaDadosBD(imagensPath, formulario, formularioOpcionais) //chama a func armazena dados enviado o nome das imagens recebidas em array\n    console.log(GuardaDados)\n    window.location.href = (\"#inicio\")\n    return GuardaDados\n    // props.mensagemDeRetorno(GuardaDados.data)\n    //retorna mensagem de sucesso ou não\n\n}\n\n//com os nomes das imagens no node, reuni todos os dados do carro e junta com o nome das imagens\nasync function ArmazenaDadosBD(recebeLocationImagens, formulario, formularioOpcionais) {\n    const classBuscaBD = new BuscaBD()\n    var imagensLocation = JSON.stringify(recebeLocationImagens);//transforma a array de localização das imagens em uma array String, para poder ser gravado em um único campo no BD\n    var reuniDados = formulario\n    reuniDados = { ...reuniDados, imagensPath: imagensLocation } //add os nomes da imagem no obj reunidados, que é o formulario\n    var reunidadosFinal = Object.assign(reuniDados, formularioOpcionais) // Object.assign torna dois objs em um só\n    console.log(reuniDados)\n    const EnviaDadosBD = await classBuscaBD.BuscaBDPostDados(reunidadosFinal)\n    return EnviaDadosBD\n}\n\nexport default UploadImagens"]},"metadata":{},"sourceType":"module"}