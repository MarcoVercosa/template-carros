[{"/home/marco/Documents/project_react/template-carros/client/src/index.js":"1","/home/marco/Documents/project_react/template-carros/client/src/App.js":"2","/home/marco/Documents/project_react/template-carros/client/src/components/menu/menu.jsx":"3","/home/marco/Documents/project_react/template-carros/client/src/components/carroselprincipal/carrosselPrincipal.jsx":"4","/home/marco/Documents/project_react/template-carros/client/src/components/fetchBackEnd/api.js":"5","/home/marco/Documents/project_react/template-carros/client/src/components/painelAdministrativo/formulario/formulario.jsx":"6","/home/marco/Documents/project_react/template-carros/client/src/components/painelAdministrativo/formulario/opcionais.jsx":"7","/home/marco/Documents/project_react/template-carros/client/src/components/painelAdministrativo/formulario/modals/modalExluirAnuncio.js":"8","/home/marco/Documents/project_react/template-carros/client/src/components/painelAdministrativo/formulario/functions/funtionCriarAnuncio.js":"9","/home/marco/Documents/project_react/template-carros/client/src/components/painelAdministrativo/formulario/functions/functionRemoverAnuncio.js":"10","/home/marco/Documents/project_react/template-carros/client/src/components/painelAdministrativo/painel/painelAdministrativo.jsx":"11","/home/marco/Documents/project_react/template-carros/client/src/components/painelAdministrativo/listaAnuncios/listaAnuncios.jsx":"12","/home/marco/Documents/project_react/template-carros/client/src/components/painelAdministrativo/listaAnuncios/modalExibirAnuncio.js":"13","/home/marco/Documents/project_react/template-carros/client/src/components/painelAdministrativo/dadosSite/dadosSite.jsx":"14","/home/marco/Documents/project_react/template-carros/client/src/components/painelAdministrativo/dadosSite/modalImagensSlide.js":"15"},{"size":1250,"mtime":1612552254756,"results":"16","hashOfConfig":"17"},{"size":285,"mtime":1611109079792,"results":"18","hashOfConfig":"17"},{"size":2902,"mtime":1611172608551,"results":"19","hashOfConfig":"17"},{"size":1255,"mtime":1611188030313,"results":"20","hashOfConfig":"17"},{"size":2691,"mtime":1613209238637,"results":"21","hashOfConfig":"17"},{"size":42114,"mtime":1613206137487,"results":"22","hashOfConfig":"17"},{"size":16819,"mtime":1612914261300,"results":"23","hashOfConfig":"17"},{"size":3530,"mtime":1612579973157,"results":"24","hashOfConfig":"17"},{"size":2565,"mtime":1612481858134,"results":"25","hashOfConfig":"17"},{"size":353,"mtime":1612461614329,"results":"26","hashOfConfig":"17"},{"size":8573,"mtime":1612918112317,"results":"27","hashOfConfig":"17"},{"size":8219,"mtime":1613273973050,"results":"28","hashOfConfig":"17"},{"size":2009,"mtime":1612915148208,"results":"29","hashOfConfig":"17"},{"size":29850,"mtime":1613274633805,"results":"30","hashOfConfig":"17"},{"size":7715,"mtime":1613269645640,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"lcbjv5",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":3,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/marco/Documents/project_react/template-carros/client/src/index.js",[],["66","67"],"/home/marco/Documents/project_react/template-carros/client/src/App.js",[],"/home/marco/Documents/project_react/template-carros/client/src/components/menu/menu.jsx",[],"/home/marco/Documents/project_react/template-carros/client/src/components/carroselprincipal/carrosselPrincipal.jsx",[],"/home/marco/Documents/project_react/template-carros/client/src/components/fetchBackEnd/api.js",[],"/home/marco/Documents/project_react/template-carros/client/src/components/painelAdministrativo/formulario/formulario.jsx",["68","69","70","71","72"],"\nimport { React, useState, useEffect, useCallback } from 'react';\n\nimport DadosOpcionais from \"./opcionais\" //formulario react opcionais\nimport BuscaBD from \"../../fetchBackEnd/api\" //classe axios\nimport FormData from 'form-data' //FormData classe que permite o multer identificar as imagens recebidas\n\nimport CriaAnuncio from \"./functions/funtionCriarAnuncio\"\n//funcão para cadastro de anuncio\n\n\nimport \"./formulario.css\"\nimport ModalExcluirAnuncio from \"./modals/modalExluirAnuncio\"\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport SaveIcon from '@material-ui/icons/Save';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport {\n    TextField,\n    InputLabel, Select, FormControl, Switch, FormControlLabel\n} from '@material-ui/core/';\n\n\nexport default function Formulario(props) {\n\n\n\n    const useStyles = makeStyles((theme) => ({\n        button: {\n            margin: theme.spacing(1),\n        },\n    }));\n    const classes = useStyles();\n    console.log(props.tipoFormulario)\n\n\n\n    const [render, setRender] = useState(1930)//recebe loop para gerar os anos para seleção do ano do carro\n    const [formulario, SetFormulario] = useState({\n        valor: \"\",\n        marca: \"\",\n        ano: 2010,\n        modelo: \"\",\n        motor: \"\",\n        kilometro: 0,\n        combustivel: \"\",\n        porta: 4,\n        cambio: \"\",\n        carroceria: \"\",\n        finalPlaca: 0,\n        sobre: \"\",\n        imagensPath: false,\n        ativado: false,\n        destaque: false\n    })\n\n    const [formularioOpcionais, setFormularioOpcionais] = useState({\n        aceitaTroca: false,\n        IPVA: false,\n        licenciado: false,\n        airbag: false,\n        alarme: false,\n        cdplayer: false,\n        dvdplayer: false,\n        gps: false,\n        radio: false,\n        radioTocaFita: false,\n        computadorBordo: false,\n        controleTracao: false,\n        controleVelocidade: false,\n        desembacadorTraseiro: false,\n        limpadorTraseiro: false,\n        arCondicionado: false,\n        arQuente: false,\n        freioAbs: false,\n        retrovisoresEletricos: false,\n        retrovisoresFotocromicos: false,\n        rodaLigaLeve: false,\n        sensorChuva: false,\n        sensorEstacionamento: false,\n        tetoSolar: false,\n        travasEletricas: false,\n        vidrosEletricos: false,\n        direcaoHidraulica: false,\n        volanteAltura: false,\n        bancoCouro: false,\n        encostoCabecaTraseiro: false,\n        bancosFrenteAquecimento: false,\n        tracaoQuatroRodas: false,\n        protetorCacamba: false,\n        blindado: false,\n        farolXenonio: false,\n    })\n\n\n    const [buscaParaAlterar, setBuscaParaAlterar] = useState(\"\")\n    //RECEBE PALAVRA PARA PESQUISAR NO BANCO DE DADOS\n\n    const [abreModal, setAbreModal] = useState(false) //usado para abrir e fechar modal\n    const [editarImagens, setEditarImagens] = useState({\n        imagensDeletadas: [],\n        imagensAdicionadas: [],\n        mensagem: \"\",\n        display: \"none\"\n    })\n\n    useEffect(() => {\n        //GERA NUMEROS DE 1930 ATÉ O ANO CORRENTE, USANDO NO CAMPO \"ANO\"\n        var anoAtual = new Date().getFullYear()\n        var anoInicio = 1930\n        var render = []\n        while (anoInicio <= anoAtual) {\n            render.push(<option >{anoInicio}</option>)\n            anoInicio++\n        }\n        setRender(render)\n    }, [])\n\n    useEffect(() => {\n        //se o componente listar anuncio chamar o formulario (no caso é o modal q chama a pedido do componente listar anuncio)\n        //vai ter a props \"listaranuncio\" então ele vai ter tambem o id (props.dados) na qual vai buscar no bd e chamar a func para preeencger o formumlario\n        async function ListaAnuncioBuscaBD() {\n            if (props.tipoFormulario === \"listaranuncio\") {\n                const classBuscaBD = new BuscaBD()\n                let resultado = await classBuscaBD.BuscaBDGetDados(props.dados)\n                PreencheFormulario(resultado)\n            }\n        }\n        ListaAnuncioBuscaBD()\n\n    }, [])\n\n\n\n    //########################  FUNÇÕES PARA CADASTRO //########################\n    //########################  FUNÇÕES PARA CADASTRO //########################\n    //########################  FUNÇÕES PARA CADASTRO //########################\n\n    function PreviewImagem() { //Gera preview das imagens ao adicioná-las\n        var armazena = []\n        for (var i = 0; i < formulario.imagensPath.length; i++) {\n            armazena.push(\n                <>\n                    <div className=\"formulario-preview-imagens-div\">\n                        <img alt={i} key={i} className=\"formulario-preview-imagens\" src={URL.createObjectURL(formulario.imagensPath[i])} />\n                        {/* URL.createObjectURL pega o campo do obj onde contem oss binários da imagem e renderiza */}\n                    </div>\n                </>\n            )\n        }\n        console.log(formulario.imagensPath)\n        return (\n            <>\n                {armazena}\n            </>\n        )\n    }\n\n    const FunctionOpcionais = useCallback((dados) => {//Essa func é chamada pelo componente externo Opcionais\n        const { name } = dados.target //retira o campo name do obj que será o nome do campo no obj formulario\n        setFormularioOpcionais(prevState => {\n            return { ...prevState, [name]: dados.target.checked }\n        })\n        console.log(formularioOpcionais)\n    }, [formularioOpcionais])\n\n    function MostrarTopoPaginaComMensagem() {\n\n        window.location.href = (\"#inicio\")\n\n    }\n\n\n    //########################  FUNÇÕES PARA EDITAR //########################\n    //########################  FUNÇÕES PARA EDITAR //########################\n    //########################  FUNÇÕES PARA EDITAR //########################\n\n\n\n    //previw das imagens adicionadas no modal\n    function PreviewImagemEdicao() { //Gera preview das imagens ao adicioná-las\n        var armazena = []\n        var push = []\n        if (editarImagens.imagensAdicionadas.length > 0) {\n            for (var i = 0; i < editarImagens.imagensAdicionadas.length; i++) {\n                armazena.push(editarImagens.imagensAdicionadas[i])\n            }\n            //por algum motivo o map não roda no editarImagens.imagensAdicionadas. Tive que criar uma array com loop\n            //e assim permitiu o map. Sempre que exclui alguma imagem ele atualiza o editarImagens.imagensAdicionadas\n            //onde a var \"armazena\" busca as infos\n            armazena.map((dados, index) => {\n                push.push(\n                    <>\n                        <div className=\"formulario-div-formualario-form-imagem-div\" style={{ rigth: \"40%\" }}>\n                            <img alt={index} key={index} className=\"formulario-preview-imagens-edicao\" src={URL.createObjectURL(dados)} />\n                        </div>\n                        <div className=\"foromulario-div-formualario-form-imagem-div-div\">\n                            <i class=\"fas fa-trash fa-2x icon-trash\"\n                                onClick={() => {\n                                    var temp = []\n                                    setEditarImagens((prevState => {\n                                        temp = armazena.filter((recebe => recebe !== dados))\n                                        return { ...prevState, imagensAdicionadas: temp }\n                                    }))  //armazena a imagem diferente da deletada   \n\n                                }}\n                            ></i>\n\n                        </div>\n                    </>\n                )\n            })\n        }\n        console.log(formulario.imagensPath)\n        return (\n            <>\n                {push}\n            </>\n        )\n    }\n\n\n    //########################  FUNÇÕES PARA EDITAR //########################\n    //########################  FUNÇÕES PARA EDITAR //########################\n    //########################  FUNÇÕES PARA EDITAR //########################\n\n\n    //buscar as infos e preencher o formulário\n    async function BuscarBDDados() {\n        const classBuscaBD = new BuscaBD()\n        const resultado = await classBuscaBD.BuscaBDGetDados(buscaParaAlterar)\n        if (resultado.data.length < 1) {\n            setBuscaParaAlterar(\"\")\n            alert(\"Anúncio não encontrado\")\n            return\n        }\n        PreencheFormulario(resultado)\n    }\n\n    function PreencheFormulario(resultado) {\n        SetFormulario({\n            id: resultado.data[0].id,\n            valor: \"R$ \" + resultado.data[0].valor + \",00\",\n            marca: resultado.data[0].marca,\n            ano: resultado.data[0].ano,\n            modelo: resultado.data[0].modelo,\n            motor: resultado.data[0].motor,\n            kilometro: resultado.data[0].kilometro,\n            combustivel: resultado.data[0].combustivel,\n            porta: resultado.data[0].porta,\n            cambio: resultado.data[0].cambio,\n            carroceria: resultado.data[0].carroceria,\n            finalPlaca: resultado.data[0].finalPlaca,\n            sobre: resultado.data[0].sobre,\n            imagensPath: JSON.parse(resultado.data[0].imagensPath), // volta a origem da transformação do JSON.stringify, voltando a ser uma array\n            ativado: resultado.data[0].ativado,\n            destaque: resultado.data[0].destaque\n        })\n        setFormularioOpcionais({\n            aceitaTroca: resultado.data[0].aceitaTroca,\n            IPVA: resultado.data[0].IPVA,\n            licenciado: resultado.data[0].licenciado,\n            airbag: resultado.data[0].airbag,\n            alarme: resultado.data[0].alarme,\n            cdplayer: resultado.data[0].cdplayer,\n            dvdplayer: resultado.data[0].dvdplayer,\n            gps: resultado.data[0].gps,\n            radio: resultado.data[0].radio,\n            radioTocaFita: resultado.data[0].radioTocaFita,\n            computadorBordo: resultado.data[0].computadorBordo,\n            controleTracao: resultado.data[0].controleTracao,\n            controleVelocidade: resultado.data[0].controleVelocidade,\n            desembacadorTraseiro: resultado.data[0].desembacadorTraseiro,\n            limpadorTraseiro: resultado.data[0].limpadorTraseiro,\n            arCondicionado: resultado.data[0].arCondicionado,\n            arQuente: resultado.data[0].arQuente,\n            freioAbs: resultado.data[0].freioAbs,\n            retrovisoresEletricos: resultado.data[0].retrovisoresEletricos,\n            retrovisoresFotocromicos: resultado.data[0].retrovisoresFotocromicos,\n            rodaLigaLeve: resultado.data[0].rodaLigaLeve,\n            sensorChuva: resultado.data[0].sensorChuva,\n            sensorEstacionamento: resultado.data[0].sensorEstacionamento,\n            tetoSolar: resultado.data[0].sensorEstacionamento,\n            travasEletricas: resultado.data[0].travasEletricas,\n            vidrosEletricos: resultado.data[0].vidrosEletricos,\n            direcaoHidraulica: resultado.data[0].direcaoHidraulica,\n            volanteAltura: resultado.data[0].volanteAltura,\n            bancoCouro: resultado.data[0].bancoCouro,\n            encostoCabecaTraseiro: resultado.data[0].encostoCabecaTraseiro,\n            bancosFrenteAquecimento: resultado.data[0].bancosFrenteAquecimento,\n            tracaoQuatroRodas: resultado.data[0].tracaoQuatroRodas,\n            protetorCacamba: resultado.data[0].protetorCacamba,\n            blindado: resultado.data[0].blindado,\n            farolXenonio: resultado.data[0].farolXenonio,\n        })\n    }\n\n    async function AtualizarDadosBD() {   //primeiro deleta as imagens solicitadas do storage\n\n        const classBuscaBD = new BuscaBD()\n        const dadosImagens = new FormData()//FormData classe que permite o multer identificar as imagens recebidas\n        let caminhoImagensMulter = [] //armazena nomes das imagens no storage\n\n        //se houver imagens a serem ADICIONADAS, adicione-as no Multer\n        if (editarImagens.imagensAdicionadas.length > 0) {\n            for (var i = 0; i < editarImagens.imagensAdicionadas.length; i++) {\n                dadosImagens.append(\"files\", editarImagens.imagensAdicionadas[i])\n                //para enviar imagens tem q ser pelo FormData\n                //primeiro coloca eles numa array com o loop for. Necessário quando é mais de uma imagem\n            }\n            const retornaImagenslLocationNodeMulter = await classBuscaBD.CadastraImagemMulter(dadosImagens)\n\n            retornaImagenslLocationNodeMulter.data.map((dados) => {\n                caminhoImagensMulter.push(dados.filename)//armezena o nome das imagens em array\n            })\n            // AtualizaTabelas(caminhoImagensMulter)\n        }\n        //se houver imagens a serem DELETADAS, delete-as no Storage\n        //Obs, a atualização das imagens no BD ja é feita no onClick do botão\n        if (editarImagens.imagensDeletadas.length > 0) {\n            const resultado = await classBuscaBD.DeletaImagem(editarImagens.imagensDeletadas)\n            console.log(resultado)\n            AtualizaTabelasBD(caminhoImagensMulter)\n        } else {\n            AtualizaTabelasBD(caminhoImagensMulter)\n        }\n\n        //depois update dados  do anúncio no BD incluindo retirar as deletadas do BD\n        async function AtualizaTabelasBD(caminhoImagensMulter) {\n\n            var formularioTemp = formulario\n\n            if (caminhoImagensMulter) {//se houve imaggens guardadas no storage\n                var stringiFy = JSON.stringify(formulario.imagensPath.concat(caminhoImagensMulter))\n                //transforma o json novamente em string. o Concat  add os valores da array caminhoImagensMulter permitindo tornar uma única array. parecido com o Objetc-consign\n                formularioTemp = { ...formularioTemp, valor: formularioTemp.valor.slice(3, -3) } //rerira o R$ e o ,00 do valor\n                formularioTemp = { ...formularioTemp, imagensPath: stringiFy }\n            }\n            else {\n                var stringiFy = JSON.stringify(formulario.imagensPath)//transforma o json novamente em string\n                formularioTemp = { ...formularioTemp, valor: formularioTemp.valor.slice(3, -3) }\n                formularioTemp = { ...formularioTemp, imagensPath: stringiFy }\n            }\n\n            var formularioTempFinal = Object.assign(formularioTemp, formularioOpcionais)\n            const resultado = await classBuscaBD.AtualizaBDDados(formularioTempFinal, buscaParaAlterar)\n            console.log(resultado)\n            props.mensagemDeRetorno(`${resultado.data} ID do anúncio: ${buscaParaAlterar}`)\n\n            MostrarTopoPaginaComMensagem()\n\n            setEditarImagens({\n                imagensDeletadas: [],\n                imagensAdicionadas: [],\n                mensagem: \"\",\n                display: \"none\"\n            })\n        }\n    }\n\n    return (\n        <>\n            {(props.tipoFormulario === \"alterarAnuncio\" || props.tipoFormulario === \"deletarAnuncio\") &&\n                <div className=\"publicacao-div-search\">\n                    <TextField\n                        onBlur={(recebe) => { setBuscaParaAlterar(recebe.target.value) }}\n                        style={{ margin: \"0 1% 3% 10%\", }}\n                        label=\"BUSCAR POR ID\"\n                        id=\"outlined-size-small\"\n                        defaultValue=\"\"\n                        variant=\"outlined\"\n                        size=\"small\"\n                        color=\"success\"\n                    />\n                    <Button\n                        onClick={() => { BuscarBDDados() }}\n                        style={{ margin: \"0\", backgroundColor: \"white\" }}\n                        variant=\"contained\"\n                        color=\"inherit\"\n                        className={classes.button}\n                        startIcon={<i class=\"fas fa-search fa-2x\"></i>}\n                    >\n                        BUSCAR ANÚNCIO\n                        </Button>\n                </div>\n            }\n            {formulario.id &&\n                <h4>ID ANÚNCIO: {formulario.id}</h4>\n            }\n            <div style={{ display: buscaParaAlterar || props.tipoFormulario === \"criarAnuncio\" || props.tipoFormulario === \"listaranuncio\" ? \"block\" : \"none\" }} className=\"formulario-div-formualario\"\n                onSubmit={async (event) => {\n                    // event.preventDefault()\n\n                    if (formulario.valor === \"\" || formulario.marca === \"\" || formulario.modelo === \"\" || formulario.motor === \"\"\n                        || formulario.combustivel === \"\" || formulario.cambio === \"\" || formulario.carroceria === \"\"\n                        || formulario.sobre === \"\") {\n                        alert(\"OS CAMPOS EM VERMELHO SÃO OBRIGATÓRIOS\")\n                        event.preventDefault()\n                        return\n                    }\n                    if (formulario.imagensPath.length > 12) {\n                        alert(\"SELECIONE ATÉ 12 IMAGENS\")\n                        event.preventDefault()\n                        return\n                    }\n\n                    var resultado = await CriaAnuncio(event, formulario, formularioOpcionais)\n                    // let mensagem = `${resultado.data.mensagem} ID: {resultado.data.resultado.insertId}`\n                    props.mensagemDeRetorno(`${resultado.data.mensagem} ID do anúncio: ${resultado.data.resultado.insertId}`)\n                }}>\n\n                {/* <form className=\"paineladministrativo-div-formualario-form\" method=\"post\" enctype=\"multipart/form-data\"> */}\n                <form className=\"formulario-div-formualario-form\" >\n\n                    <TextField style={{ marginLeft: '20px', width: '15%' }}\n\n                        onClick={(envia) => {\n                            SetFormulario(prevState => {\n                                return { ...prevState, valor: \"\" }\n                            })\n                        }}\n\n                        onChange={(envia) => {\n\n                            SetFormulario(prevState => {\n                                return { ...prevState, valor: envia.target.value }\n                            })\n                        }}\n                        onBlur={(envia) => {//formata para deixar decimais\n                            if (envia.target.value.length < 1) { envia.target.value = 0 }\n                            SetFormulario(prevState => {\n                                const formater = new Intl.NumberFormat(\"pt-BR\")\n                                // alert(typeof (formater.format(parseFloat(envia.target.value))))\n                                return { ...prevState, valor: \"R$ \" + formater.format(parseFloat(envia.target.value)) + \",00\" }\n                            })\n                        }}\n\n                        value={formulario.valor}\n                        id=\"Valor\"\n                        label=\"VALOR - Só números\"\n                        variant=\"outlined\"\n                        className=\"FormularioCadastro_inputs\"\n                        margin=\"dense\"\n                        error={!formulario.valor}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n\n\n                    <FormControl style={{ marginLeft: '20px', width: '15%' }}>\n                        <InputLabel shrink htmlFor=\"age-native-simple\">Ano</InputLabel>\n\n                        <Select\n\n                            native\n                            value={formulario.ano}\n                            onChange={(envia) => {\n                                SetFormulario(prevState => {\n                                    return { ...prevState, ano: envia.target.value }\n                                })\n                            }}\n                        >\n                            <option aria-label=\"None\" value=\"\" />\n                            {render}\n                        </Select>\n\n                    </FormControl>\n\n\n                    <TextField style={{ marginLeft: '20px', width: '15%' }}\n                        onChange={(envia) => {\n                            SetFormulario(prevState => {\n                                return { ...prevState, marca: envia.target.value }\n                            })\n                        }}\n                        value={formulario.marca}\n                        id=\"marca\"\n                        label=\"MARCA - ex: FIAT\"\n                        variant=\"outlined\"\n                        className=\"FormularioCadastro_inputs\"\n                        margin=\"dense\"\n                        error={!formulario.marca}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n                    <TextField style={{ marginLeft: '20px', width: '15%' }}\n                        onChange={(envia) => {\n                            SetFormulario(prevState => {\n                                return { ...prevState, modelo: envia.target.value }\n                            })\n                        }}\n                        value={formulario.modelo}\n                        id=\"modelo\"\n                        label=\"MODELO - ex: UP\"\n                        variant=\"outlined\"\n                        className=\"FormularioCadastro_inputs\"\n                        margin=\"dense\"\n                        error={!formulario.modelo}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n                    <TextField style={{ marginLeft: '20px', width: '15%' }}\n                        onChange={(envia) => {\n                            SetFormulario(prevState => {\n                                return { ...prevState, motor: envia.target.value }\n                            })\n                        }}\n                        value={formulario.motor}\n                        id=\"motor\"\n                        label=\"MOTOR - ex: 2.0 TSI 16V\"\n                        variant=\"outlined\"\n                        className=\"FormularioCadastro_inputs\"\n                        margin=\"dense\"\n                        error={!formulario.motor}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n\n                    <TextField style={{ marginLeft: '20px', width: '15%' }}\n\n                        onChange={(envia) => {\n                            SetFormulario(prevState => {\n                                return { ...prevState, kilometro: envia.target.value }\n                            })\n                        }}\n                        onClick={(envia) => {\n                            SetFormulario(prevState => {\n                                return { ...prevState, kilometro: 0 }\n                            })\n                        }}\n\n                        onBlur={(envia) => {//formata para deixar decimais\n                            if (envia.target.value.length < 1) { envia.target.value = 0 }\n                            SetFormulario(prevState => {\n                                const formater = new Intl.NumberFormat(\"pt-BR\")\n\n                                return { ...prevState, kilometro: formater.format(parseFloat(envia.target.value)) }\n                            })\n                        }}\n\n\n                        id=\"filled-number\"\n                        label=\"KM - Só números\"\n                        type=\"number\"\n                        value={formulario.kilometro}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        variant=\"outlined\"\n                        margin=\"dense\"\n                    />\n                    <FormControl style={{ marginLeft: '20px', width: '15%' }}>\n                        <InputLabel shrink htmlFor=\"age-native-simple\">COMBUSTÍVEL</InputLabel>\n                        <Select\n                            native\n                            value={formulario.combustivel}\n                            error={!formulario.combustivel}\n                            onChange={(envia) => {\n                                SetFormulario(prevState => {\n                                    return { ...prevState, combustivel: envia.target.value }\n                                })\n                            }}\n                        >\n                            <option aria-label=\"None\" value=\"\" />\n                            <option >GASOLINA</option>\n                            <option >ALCOOL</option>\n                            <option >FLEX</option>\n                            <option >DIESEL</option>\n                            <option >ELÉTRICO</option>\n                            <option >HÍBRIDO</option>\n\n                        </Select>\n                    </FormControl>\n\n                    <FormControl style={{ marginLeft: '20px', width: '15%' }}>\n                        <InputLabel shrink htmlFor=\"age-native-simple\">PORTAS</InputLabel>\n                        <Select\n                            native\n                            value={formulario.porta}\n                            onChange={(envia) => {\n                                SetFormulario(prevState => {\n                                    return { ...prevState, porta: envia.target.value }\n                                })\n                            }}\n                        >\n                            <option aria-label=\"None\" value=\"\" />\n                            <option >1</option>\n                            <option >2</option>\n                            <option >3</option>\n                            <option >4</option>\n                            <option >5</option>\n                            <option >6</option>\n                        </Select>\n                    </FormControl>\n\n                    <FormControl style={{ marginLeft: '20px', width: '15%' }}>\n                        <InputLabel shrink htmlFor=\"age-native-simple\">CÂMBIO</InputLabel>\n                        <Select\n                            native\n                            value={formulario.cambio}\n                            error={!formulario.cambio}\n                            onChange={(envia) => {\n                                SetFormulario(prevState => {\n                                    return { ...prevState, cambio: envia.target.value }\n                                })\n                            }}\n                        >\n                            <option aria-label=\"None\" value=\"\" />\n                            <option >MANUAL</option>\n                            <option >AUTOMÁTICO</option>\n                            <option >SEMIAUTOMÁTICO</option>\n                            <option >AUTOMATIZADO</option>\n\n                        </Select>\n                    </FormControl>\n\n                    <hr className=\"formulario-div-formualario-form-hr\" />\n\n                    <FormControl style={{ marginLeft: '20px', width: '15%' }}>\n                        <InputLabel shrink htmlFor=\"age-native-simple\">CARROCERIAS</InputLabel>\n                        <Select\n                            native\n                            value={formulario.carroceria}\n                            error={!formulario.carroceria}\n                            onChange={(envia) => {\n                                SetFormulario(prevState => {\n                                    return { ...prevState, carroceria: envia.target.value }\n                                })\n                            }}\n                        >\n                            <option aria-label=\"None\" value=\"\" />\n                            <option >HATCH</option>\n                            <option >SEDÃ</option>\n                            <option >PERUA/STATION-WAGONS (SW)</option>\n                            <option >COUPÉ</option>\n                            <option >CONVERSÍVEL</option>\n                            <option >MINIVAN</option>\n                            <option >LIMOUSINE</option>\n                            <option >SUV / UTILITÁRIO ESPORTIVO</option>\n                            <option >JIPE/</option>\n                            <option >PICAPE/</option>\n\n                        </Select>\n                    </FormControl>\n\n                    <FormControl style={{ marginLeft: '20px', width: '15%' }}>\n                        <InputLabel shrink htmlFor=\"age-native-simple\">FINAL PLACA</InputLabel>\n                        <Select\n                            native\n                            value={formulario.finalPlaca}\n                            onChange={(envia) => {\n                                SetFormulario(prevState => {\n                                    return { ...prevState, finalPlaca: envia.target.value }\n                                })\n                            }}\n                        >\n                            <option aria-label=\"None\" value=\"\" />\n                            <option >0</option>\n                            <option >1</option>\n                            <option >2</option>\n                            <option >3</option>\n                            <option >4</option>\n                            <option >5</option>\n                            <option >6</option>\n                            <option >7</option>\n                            <option >8</option>\n                            <option >9</option>\n\n                        </Select>\n                    </FormControl>\n                    <hr className=\"formulario-div-formualario-form-hr\" />\n\n                    <TextField style={{ marginLeft: '20px', width: '90%' }}\n                        value={formulario.sobre}\n                        onChange={(envia) => {\n                            SetFormulario(prevState => {\n                                return { ...prevState, sobre: envia.target.value }\n                            })\n                        }}\n                        id=\"sobre\"\n                        label=\"SOBRE O VEÍCULO \"\n                        variant=\"outlined\"\n                        multiline\n\n                        className=\"FormularioCadastro_inputs\"\n                        margin=\"dense\"\n                        error={!formulario.sobre}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n\n                    <hr className=\"formulario-div-formualario-form-hr\" />\n                    <DadosOpcionais formulario={formularioOpcionais} Opcionais={FunctionOpcionais} />\n\n                    <hr className=\"formulario-div-formualario-form-hr\" />\n                    {props.tipoFormulario === \"criarAnuncio\" &&\n                        <>\n                            <label className=\"formulario-div-formualario-form-label-imagem\">\n                                Selecione as imagens:\n                            <input type=\"file\" name=\"file\" multiple=\"multiple\"\n\n                                    onChange={(envia) => {\n                                        SetFormulario(prevState => {\n                                            return { ...prevState, imagensPath: envia.target.files }\n                                        })\n                                    }}\n                                ></input>\n                            </label>\n\n                            {formulario.imagensPath.length > 0 &&\n                                <>\n                                    <h2>Preview Imagens</h2>\n                                    <div className=\"formulario-preview-div\">\n\n                                        <PreviewImagem />\n                                    </div>\n                                </>\n                            }\n                        </>\n                    }\n\n                    {/* ABRE O MODAL*/}\n                    {props.tipoFormulario === \"alterarAnuncio\" &&\n                        <>\n                            <h3 style={{ display: \"flex\", justifyContent: \"center\", textAlign: \"center\", color: \"rgb(68, 68, 68)\" }}>IMAGENS ANÚNCIO</h3>\n                            {/* REMOÇÃO DE IMAGENS */}\n                            <div style={{ display: \"flex\", justifyContent: \"center\", textAlign: \"center\", marginRight: \"9%\" }}>\n                                <a href=\"#abrirModal\" className=\"modalbotao\"><button type=\"button\"\n                                    className=\"modalbotao-abririmagem\"\n                                    onClick={() => { setAbreModal(true) }}\n                                ><i class=\"far fa-images fa-4x\"></i></button></a>\n                            </div>\n                            {/* <label className=\"label-imagens-altera-anuncio\">{formulario.imagensPath.length} Imagens do anúncio</label> */}\n                            <div className=\"modal-mensagem-alteração\" style={{ display: editarImagens.display }}>\n                                {editarImagens.mensagem}\n                                {/* Mensagem quando pressiona o botao salvar dentro do modal */}\n                            </div>\n\n                            {abreModal &&\n                                <div id=\"abrirModal\" class=\"modal\">\n                                    <div >\n                                        <a href=\"#fechar\" title=\"Fechar\" class=\"fechar\">\n                                            <button type=\"button\">X</button>\n                                        </a>\n                                        <h3 style={{ color: \"grey\" }}>GERENCIAR IMAGENS ANÚNCIO</h3>\n                                        <hr></hr>\n\n                                        {formulario.imagensPath.length > 0 && //se existir imagem\n\n                                            formulario.imagensPath.map((recebe) => { //JSON.parse pega a array que está em string e transforma em string\n                                                return (\n                                                    <>\n                                                        <div class=\"formulario-div-formualario-form-imagem-div\" >\n                                                            <a href={\"http://192.168.0.150:9000/static/\" + recebe} target=\"_blank\">\n                                                                <img alt={recebe} key={recebe} src={\"http://192.168.0.150:9000/static/\" + recebe}></img>\n                                                            </a>\n\n                                                        </div>\n                                                        <div className=\"foromulario-div-formualario-form-imagem-div-div\">\n                                                            <i class=\"fas fa-trash fa-2x icon-trash\"\n                                                                onClick={() => {\n\n                                                                    setEditarImagens((prevState => {\n                                                                        return { ...prevState, imagensDeletadas: [...editarImagens.imagensDeletadas, recebe] }\n                                                                    }))  //armazena a imagem deletada para deletar no Multer\n\n                                                                    //Já Atualiza o formulario com as imagens NÃO DELETADAS que vai para o BD\n                                                                    var atualiza = formulario.imagensPath.filter(temp => temp !== recebe)\n                                                                    SetFormulario((prevState => {\n                                                                        return { ...prevState, imagensPath: atualiza }\n                                                                    }))\n                                                                }}\n                                                            ></i>\n\n                                                        </div>\n                                                    </>\n                                                )\n                                            })\n\n                                        }\n\n                                        <PreviewImagemEdicao />\n\n\n                                        <div className=\"modalbotao-salvar\" >\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                size=\"large\"\n                                                className={classes.button}\n                                                startIcon={<SaveIcon />}\n                                                onClick={() => {\n                                                    setEditarImagens((prevState => {\n                                                        setAbreModal(false)\n\n                                                        return { ...prevState, mensagem: \"Cliquem em ALTERAR ANÚNCIO para salvar as alterações\", display: \"flex\" }\n                                                    }))\n                                                }} >\n                                                SALVAR\n                                            </Button>\n                                        </div>\n                                        <div className=\"modalbotao-salvar\">\n\n                                            <label className=\"formulario-div-formualario-form-label-plus-imagens\">\n                                                ADICIONAR IMAGENS:\n                                            </label>\n                                            <hr></hr>\n                                            <input className=\"input-imagens-edicao\" type=\"file\" name=\"file\" multiple=\"multiple\"\n                                                onChange={(envia) => {\n                                                    setEditarImagens(prevState => {\n                                                        return { ...prevState, imagensAdicionadas: envia.target.files }\n                                                    })\n                                                }}\n                                            ></input>\n                                        </div>\n                                    </div>\n                                </div>\n                            }\n                        </>\n                    }\n                    <div className=\"formulario-select-ativado\"\n                        style={{ backgroundColor: !formulario.ativado ? \"rgb(232, 45, 45)\" : \"rgb(68, 214, 117)\" }}\n                    >\n                        <FormControlLabel\n                            checked={formulario.ativado}\n                            name=\"ativado\"\n                            value=\"start\"\n                            control={<Switch color=\"primary\"\n\n                                onChange={(envia) => (SetFormulario(prevState => {\n                                    return { ...prevState, ativado: envia.target.checked }\n                                }))}\n\n                            />}\n                            label=\"ATIVAR ANÚNCIO\"\n                            labelPlacement=\"start\"\n                        />\n                    </div>\n\n                    <div className=\"formulario-select-ativado\"\n                        style={{ backgroundColor: \"rgb(150, 150, 170)\" }}\n                    >\n                        <FormControlLabel\n                            checked={formulario.destaque}\n                            name=\"destaque\"\n                            value=\"start\"\n                            control={<Switch color=\"primary\"\n\n                                onChange={(envia) => (SetFormulario(prevState => {\n                                    return { ...prevState, destaque: envia.target.checked }\n                                }))}\n\n                            />}\n                            label=\"DESTAQUE PÁGINA\"\n                            labelPlacement=\"start\"\n                        />\n                    </div>\n\n                    <div className=\"formulario-div-formualario-form-botao-publicar\"\n                        style={{ display: \"flex\", justifyContent: \"center\", textAlign: \"center\" }}\n                    >\n                        {props.tipoFormulario === \"criarAnuncio\" &&\n\n\n                            < Button\n                                type=\"submit\"\n                                variant=\"contained\"\n                                color=\"primary\"\n                                size=\"large\"\n                                className={classes.button}\n                                startIcon={<SaveIcon />}\n                            >\n                                PUBLICAR\n                        </Button>\n\n                        }\n                        {props.tipoFormulario === \"alterarAnuncio\" &&\n                            <Button\n                                style={{ marginTop: \"75px\" }}\n                                onClick={() => { AtualizarDadosBD() }}\n                                variant=\"contained\"\n                                color=\"default\"\n                                className={classes.button}\n                                startIcon={<CloudUploadIcon />}\n                            >\n                                ALTERAR ANÚNCIO\n                        </Button>\n                        }\n                        {props.tipoFormulario === \"deletarAnuncio\" &&\n                            <>\n\n                                <ModalExcluirAnuncio\n                                    buscaParaAlterar={buscaParaAlterar} formulario={formulario} mensagemDeRetorno={props.mensagemDeRetorno} MostrarTopoPaginaComMensagem={MostrarTopoPaginaComMensagem}\n                                />\n                            </>\n                        }\n                    </div>\n\n                </form>\n            </div >\n\n        </>\n    )\n}\n","/home/marco/Documents/project_react/template-carros/client/src/components/painelAdministrativo/formulario/opcionais.jsx",[],"/home/marco/Documents/project_react/template-carros/client/src/components/painelAdministrativo/formulario/modals/modalExluirAnuncio.js",[],"/home/marco/Documents/project_react/template-carros/client/src/components/painelAdministrativo/formulario/functions/funtionCriarAnuncio.js",["73"],"import FormData from 'form-data' //class que permite enviar imagens para o backend\nimport BuscaBD from \"../../../fetchBackEnd/api\" //classe axios\n\nasync function CriaAnuncio(event, formulario, formularioOpcionais) {//fazupload imagens e retornar o nome e caminho de cada imagem no node\n    event.preventDefault()\n    const classBuscaBD = new BuscaBD()// classe da Api onde está conf  o Axios\n    const dadosImagens = new FormData()//FormData classe que permite o multer identificar as imagens\n    for (var i = 0; i < formulario.imagensPath.length; i++) {\n        dadosImagens.append(\"files\", formulario.imagensPath[i])\n    }\n    //para enviar imagens tem q ser pelo FormData\n    //primeiro coloca eles numa array com o loop for. Necessário quando é mais de uma imagem\n\n    const retornaImagenslLocationNodeMulter = await classBuscaBD.CadastraImagemMulter(dadosImagens)\n    //faz o upload das imagens e o node vai retornar as imagens recebidas\n    console.log(retornaImagenslLocationNodeMulter)\n    let imagensPath = []\n    //faz um map na array nos nomes das imagens retornadas do Node\n    retornaImagenslLocationNodeMulter.data.map((dados) => {\n        imagensPath.push(dados.filename)//armezeneo nome das imagens em array\n    })\n    const GuardaDados = await ArmazenaDadosBD(imagensPath, formulario, formularioOpcionais) //chama a func armazena dados enviado o nome das imagens recebidas em array\n    console.log(GuardaDados)\n    window.location.href = (\"#inicio\")\n    return GuardaDados\n    // props.mensagemDeRetorno(GuardaDados.data)\n    //retorna mensagem de sucesso ou não\n\n}\n\n//com os nomes das imagens no node, reuni todos os dados do carro e junta com o nome das imagens\nasync function ArmazenaDadosBD(recebeLocationImagens, formulario, formularioOpcionais) {\n    const classBuscaBD = new BuscaBD()\n    var imagensLocation = JSON.stringify(recebeLocationImagens);//transforma a array de localização das imagens em uma array String, para poder ser gravado em um único campo no BD\n    var reuniDados = formulario\n    reuniDados = { ...reuniDados, valor: reuniDados.valor.slice(3, -3) } //3 RETIRA R$  do incio e o -3 retira ,00 do final da string\n    reuniDados = { ...reuniDados, imagensPath: imagensLocation } //add os nomes da imagem no obj reunidados, que é o formulario\n    var reunidadosFinal = Object.assign(reuniDados, formularioOpcionais) // Object.assign torna dois objs em um só\n    console.log(reuniDados)\n    const EnviaDadosBD = await classBuscaBD.CadastraDadosBD(reunidadosFinal)\n    return EnviaDadosBD\n}\n\nexport default CriaAnuncio","/home/marco/Documents/project_react/template-carros/client/src/components/painelAdministrativo/formulario/functions/functionRemoverAnuncio.js",["74"],"import BuscaBD from \"../../../fetchBackEnd/api\"\n\nasync function RemoverAnuncio(idPesquisa, imagensStorage) {\n\n    const classBuscaBD = new BuscaBD()\n    const deletaImagem = await classBuscaBD.DeletaImagem(imagensStorage)\n    const deletaDadosBD = await classBuscaBD.DeletaAnuncioBD(idPesquisa)\n    return deletaDadosBD\n}\n\n\nexport default RemoverAnuncio","/home/marco/Documents/project_react/template-carros/client/src/components/painelAdministrativo/painel/painelAdministrativo.jsx",[],"/home/marco/Documents/project_react/template-carros/client/src/components/painelAdministrativo/listaAnuncios/listaAnuncios.jsx",["75","76"],"/home/marco/Documents/project_react/template-carros/client/src/components/painelAdministrativo/listaAnuncios/modalExibirAnuncio.js",[],"/home/marco/Documents/project_react/template-carros/client/src/components/painelAdministrativo/dadosSite/dadosSite.jsx",["77","78","79","80","81","82","83"],"/home/marco/Documents/project_react/template-carros/client/src/components/painelAdministrativo/dadosSite/modalImagensSlide.js",["84","85"],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":132,"column":8,"nodeType":"92","endLine":132,"endColumn":10,"suggestions":"93"},{"ruleId":"94","severity":1,"message":"95","line":192,"column":41,"nodeType":"96","messageId":"97","endLine":192,"endColumn":43},{"ruleId":"94","severity":1,"message":"95","line":314,"column":64,"nodeType":"96","messageId":"97","endLine":314,"endColumn":66},{"ruleId":"98","severity":1,"message":"99","line":341,"column":21,"nodeType":"100","messageId":"101","endLine":341,"endColumn":30},{"ruleId":"102","severity":1,"message":"103","line":760,"column":61,"nodeType":"104","endLine":760,"endColumn":132},{"ruleId":"94","severity":1,"message":"95","line":19,"column":56,"nodeType":"96","messageId":"97","endLine":19,"endColumn":58},{"ruleId":"105","severity":1,"message":"106","line":6,"column":11,"nodeType":"100","messageId":"107","endLine":6,"endColumn":23},{"ruleId":"90","severity":1,"message":"108","line":21,"column":15,"nodeType":"96","endLine":36,"endColumn":6},{"ruleId":"90","severity":1,"message":"109","line":36,"column":8,"nodeType":"92","endLine":36,"endColumn":10,"suggestions":"110"},{"ruleId":"90","severity":1,"message":"108","line":64,"column":15,"nodeType":"96","endLine":70,"endColumn":6},{"ruleId":"111","severity":1,"message":"112","line":66,"column":30,"nodeType":"113","messageId":"114","endLine":66,"endColumn":41,"fix":"115"},{"ruleId":"111","severity":1,"message":"112","line":123,"column":30,"nodeType":"113","messageId":"114","endLine":123,"endColumn":41,"fix":"116"},{"ruleId":"94","severity":1,"message":"95","line":134,"column":65,"nodeType":"96","messageId":"97","endLine":134,"endColumn":67},{"ruleId":"105","severity":1,"message":"117","line":141,"column":19,"nodeType":"100","messageId":"107","endLine":141,"endColumn":28},{"ruleId":"111","severity":1,"message":"112","line":149,"column":30,"nodeType":"113","messageId":"114","endLine":149,"endColumn":41,"fix":"118"},{"ruleId":"98","severity":1,"message":"119","line":159,"column":21,"nodeType":"100","messageId":"101","endLine":159,"endColumn":29},{"ruleId":"105","severity":1,"message":"120","line":1,"column":38,"nodeType":"100","messageId":"107","endLine":1,"endColumn":42},{"ruleId":"94","severity":1,"message":"95","line":90,"column":37,"nodeType":"96","messageId":"97","endLine":90,"endColumn":39},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.dados' and 'props.tipoFormulario'. Either include them or remove the dependency array.","ArrayExpression",["123"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-redeclare","'stringiFy' is already defined.","Identifier","redeclared","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","no-unused-vars","'deletaImagem' is assigned a value but never used.","unusedVar","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","React Hook useEffect has missing dependencies: 'dadosListaAnuncio.paginaAvanca' and 'dadosListaAnuncio.paginaRetorna'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setDadosListaAnuncio' needs the current value of 'dadosListaAnuncio.paginaRetorna'.",["124"],"new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"125","text":"126"},{"range":"127","text":"126"},"'resultado' is assigned a value but never used.",{"range":"128","text":"126"},"'stringFy' is already defined.","'memo' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},[1616,1616],"()",[3991,3991],[5450,5450],"Update the dependencies array to be: [props.dados, props.tipoFormulario]",{"range":"133","text":"134"},"Update the dependencies array to be: [dadosListaAnuncio.paginaAvanca, dadosListaAnuncio.paginaRetorna]",{"range":"135","text":"136"},[4069,4071],"[props.dados, props.tipoFormulario]",[1329,1331],"[dadosListaAnuncio.paginaAvanca, dadosListaAnuncio.paginaRetorna]"]